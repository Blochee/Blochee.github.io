<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python常用库</title>
      <link href="/2023/12/04/python%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
      <url>/2023/12/04/python%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p>作用：提供了一种数组类型，能够进行科学计算</p><p>导入方法： import numpy as np</p><p>显示版本：np._<em>version</em>_</p><p>注意：Numpy默认ndarray的所有的元素的类型是相同的</p><p>​如果传进来的列表中包含不同的数据类型，则统一为同一类型</p><p>​优先级：str&gt;float&gt;int</p><h3 id="创建Array"><a href="#创建Array" class="headerlink" title="创建Array"></a>创建Array</h3><ol><li>使用np.array()</li></ol><pre><code class="python">age = [15,16,18]array3 = np.array(age, dtype=np.float32)</code></pre><ol start="2"><li>使用np.routines()创建</li></ol><ul><li>np.ones(shape, dtype&#x3D;None, order&#x3D;’C’)</li></ul><pre><code class="python"># 构造一个5行3列的二维数组np.ones(shape=(5,3), dtype=np.int8)</code></pre><ul><li>np.zeros(shape, dtype&#x3D;float, order&#x3D;’C’)</li></ul><pre><code class="python">np.zeros(shape=(5,6))</code></pre><ul><li>np.full(shape, fill_value, dtype&#x3D;None, order&#x3D;’C’)</li></ul><pre><code class="python">np.full(shape=(2,3), fill_value=6)</code></pre><ul><li>np.eye(N, M&#x3D;None, k&#x3D;0, dtype&#x3D;float)</li></ul><pre><code class="python"># 生成对角线元素为1的单位矩阵np.eye(N=3)</code></pre><ul><li>np.linspace(start, stop, num&#x3D;50, endpoint&#x3D;True, retstep&#x3D;False, dtype&#x3D;None)</li></ul><pre><code class="python"># 等差数列np.linspace(0,10,10)</code></pre><ul><li>np.arange([start, ]stop, [step, ]dtype&#x3D;None)</li></ul><pre><code class="python">np.arange(0,10,step=1)</code></pre><ul><li>np.random.randint(low, high&#x3D;None, size&#x3D;None, dtype&#x3D;’l’)</li></ul><pre><code class="python"># size 同 shapenp.random.randint(0,100,size=(5,5))</code></pre><ul><li>正态分布函数：np.random.randn(d0, d1, …, dn) 标准正态分布，np.random.normal() 普通正态分布</li></ul><pre><code class="python">np.random.randn(3,5)np.random.normal(loc=170, scale=5, size=(5,3))</code></pre><ul><li>np.random.random(size&#x3D;None):生成0到1的随机数，左闭右开</li></ul><pre><code class="python">np.random.random(size=(5,5))# 生成一组随机索引np.random.permutation(10)</code></pre><h3 id="ndarray的属性"><a href="#ndarray的属性" class="headerlink" title="ndarray的属性"></a>ndarray的属性</h3><p>四个重要参数：</p><ul><li>ndim：维度</li><li>shape：形状</li><li>size：总长度</li><li>dtype：元素类型</li></ul><pre><code class="python">arr = np.random.randint(0,100,size=(5,4,3))arr.ndimarr.shapearr.size# 获取数组元素类型arr.dtype# 获取数组类型type(arr)</code></pre><h3 id="ndarray的基本操作"><a href="#ndarray的基本操作" class="headerlink" title="ndarray的基本操作"></a>ndarray的基本操作</h3><ol><li>索引</li></ol><pre><code class="python">arr1 = np.array([1,2,3,4,5])arr1[0]# 使用列表作为索引访问arr1[[0,1,2,0,1,2]]arr2 = np.array([[1,2,3],[4,5,6]])# 列表的访问方式arr2[0][0]# 使用BOOL列表作为索引访问, True对应的值会被返回bool_list = [True, False, True, False, True]arr1[bool_list]</code></pre><ol start="2"><li>切片</li></ol><pre><code class="python">arr2 = np.random.randint(0,100,size=(5,6))# 行切片arr2[0:2]# 列切片 不论多少维，每一个维度的切片范围都是用冒号表示，使用逗号分割，最后一个维度可以省略，但是被切片的维度之前的维度不能省arr2[:,0:2]arr3 = np.random.randint(0,10,size=(3,4,5))# 切前两个数组arr3[0:2]# 切割每一个二维数组的前两列arr3[:,:,0:2]# 切割每一个二维数组的前两行arr3[:,0:2]#数据反转arr1 = np.array([1,2,3,4,5])arr1[::-1]</code></pre><ol start="3"><li>变形</li></ol><pre><code class="python">arr = np.random.randint(0,10,size=(20))#参数是一个元组arr.reshape((4,5))arr.reshape(3,7)</code></pre><ol start="4"><li>级联</li></ol><pre><code class="python">np.concatenate((arr1, arr2), axis=1)</code></pre><ol start="5"><li><p>切分</p></li><li><p>副本</p></li></ol><h3 id="ndarray的聚合操作"><a href="#ndarray的聚合操作" class="headerlink" title="ndarray的聚合操作"></a>ndarray的聚合操作</h3><ol><li>常见操作</li></ol><pre><code class="python">arr = np.random.randint(0,10,size=10)arr.sum()# 求平均值arr.mean()arr.max()arr.min()# 求最大值索引arr.argmax()arr.argmin()# 标准方差arr.std()# 求方差arr.var()# 注意这个语法格式np.median(arr)#这是一个错误的格式arr.median()</code></pre><ol start="2"><li>其它操作</li></ol><pre><code class="python">Function NameNaN-safe VersionDescriptionnp.sumnp.nansumCompute sum of elementsnp.prodnp.nanprodCompute product of elementsnp.meannp.nanmeanCompute mean of elementsnp.stdnp.nanstdCompute standard deviationnp.varnp.nanvarCompute variancenp.minnp.nanminFind minimum valuenp.maxnp.nanmaxFind maximum valuenp.argminnp.nanargminFind index of minimum valuenp.argmaxnp.nanargmaxFind index of maximum valuenp.mediannp.nanmedianCompute median of elementsnp.percentilenp.nanpercentileCompute rank-based statistics of elementsnp.anyN/AEvaluate whether any elements are truenp.allN/AEvaluate whether all elements are truenp.power 幂运算</code></pre><h3 id="ndarray矩阵操作"><a href="#ndarray矩阵操作" class="headerlink" title="ndarray矩阵操作"></a>ndarray矩阵操作</h3><ol><li>基本的矩阵操作</li></ol><ul><li>算术运算符：加减乘除</li><li>矩阵积np.dot</li></ul><pre><code class="python">a = np.array([[1,2],[3,4]])b = np.array([[1,1],[2,2]])display(a, b)np.dot(a, b)</code></pre><ol start="2"><li>广播机制</li></ol><pre><code class="python">arr = np.array([1,2,3,4,5])data = 3arr + data</code></pre><p>注意：ndarray广播机制的两条规则</p><ul><li>为缺失的维度补1</li><li>假定缺失元素用已经有的值填充</li></ul><pre><code class="python">m = np.ones((2,3))a = np.arange(3)display(m, a)m + am + 3# 不能广播运算的例子m = np.ones(shape=(3,3))n = np.array([[1,2],[3,4]])a = np.arange(0,3,step=1).reshape((3, 1))b = np.arange(3)a + b</code></pre><h3 id="ndarray的排序"><a href="#ndarray的排序" class="headerlink" title="ndarray的排序"></a>ndarray的排序</h3><ol><li>快速排序</li></ol><pre><code class="python">data = np.random.permutation(10)data.sort()datadata.sort(data)</code></pre><ol start="2"><li>部分排序</li></ol><pre><code class="python">data = np.random.permutation(10000)np.partition(data, 4)[:4]np.partition(data,-4)[-4:]</code></pre><p>np.partition(a,k)</p><ul><li>当k为正数时，我们想要得到最小的k个数</li><li>当k为负数时，我们想要得到最大的k个数</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>量子力学</title>
      <link href="/2023/11/20/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/"/>
      <url>/2023/11/20/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><ol><li><p>波尔假设</p><p>定态：绕核运动的电子只能沿着一组特殊的轨道运动，并处于稳定状态，既不吸收也不发出辐射</p><p>量子跃迁：当电子由一个定态跃迁到另一个定态时，才产生辐射的吸收或发射的现象</p></li><li><p>波尔量子论的局限性</p><p>对复杂原子光谱无法处理</p><p>波尔理论仅能解决谱线频率问题，但不能求出谱线强度</p><p>波尔理论把微观粒子当做经典力学中的质点，以经典力学的方法解决微观粒子的运动规律，多少带点人为的性质，其物理本质还不清楚</p></li><li><p>德布罗意关系</p><p>注意和普朗克-爱因斯坦关系式的区分</p></li><li><p>自由粒子的德布罗意波以及自由粒子的德布罗意波的波长</p></li></ol><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="波函数的统计解释"><a href="#波函数的统计解释" class="headerlink" title="波函数的统计解释"></a>波函数的统计解释</h2><ul><li>电子衍射实验的波恩统计解释</li></ul><ol><li><p>波函数的统计解释</p><p>波函数在空间一点的强度（振幅绝对值的平方）和在该点找到粒子的概率成正比（概率波）</p></li><li><p>基本假设：波函数决定了粒子在空间任意一点出现的概率。波函数描写体系的量子状态</p></li><li><p>粒子在空间各点出现的概率总和为1</p></li><li><p>粒子在空间各点出现的概率仅仅取决于波函数在空间各点的相对强度。如果波函数在空间各点的振幅同时扩大一倍，并不会改变所描写的粒子状态</p></li></ol><ul><li>波函数的归一化</li></ul><h2 id="态叠加原理"><a href="#态叠加原理" class="headerlink" title="态叠加原理"></a>态叠加原理</h2><ul><li>概念</li></ul><ol><li>如果态Ψ1和态Ψ2是体系的可能状态，那么它们的线性叠加态Ψ也是体系的可能状态</li><li>当粒子处于Ψ1和Ψ2的线性叠加态Ψ时，粒子既处于态Ψ1，又处于态Ψ2</li></ol><ul><li>态的不同表示方式（坐标表象和动量表象）</li></ul><h2 id="薛定谔方程"><a href="#薛定谔方程" class="headerlink" title="薛定谔方程"></a>薛定谔方程</h2><ul><li>建立薛定谔方程的条件</li></ul><ol><li>波函数应满足含有对时间微商的微分方程</li><li>方程是线性的</li><li>方程系数不含状态参量（如动量，能量等）</li></ol><ul><li>建立薛定谔方程的简化步骤</li></ul><ol><li>写出体系能量E的表达式</li><li>表达式两边右乘波函数Ψ</li><li>代入能量算符和动量算符</li></ol><ul><li>薛定谔方程是量子力学的一个基本假设，它反应了微观粒子的运动规律。它的正确性是由各种具体情况下从方程得出的结论和实现结果相比较来验证的</li></ul><h2 id="定态薛定谔方程"><a href="#定态薛定谔方程" class="headerlink" title="定态薛定谔方程"></a>定态薛定谔方程</h2><ul><li>定态薛定谔方程</li><li>哈密顿算符</li><li>当体系处于能量算符本征函数所描写的状态（能量本征态）时，粒子的能量具有确定的数值，即本征值</li></ul><h2 id="一维无限深势阱（考大题）"><a href="#一维无限深势阱（考大题）" class="headerlink" title="一维无限深势阱（考大题）"></a>一维无限深势阱（考大题）</h2><ul><li>掌握求解一维无限深势阱的方法和对应解</li><li>系统的能量是量子化的，即所构成的能谱是离散的，且能级分布不均匀</li><li>粒子存在最低能级且不为0（基态n&#x3D;1，体系的能量最低的态称为基态），这是微观粒子波动性的表现</li><li>把在无限远处为0的波函数所描写的状态称为束缚态，束缚态所属的能级一般是分立的</li></ul><h2 id="线性谐振子"><a href="#线性谐振子" class="headerlink" title="线性谐振子"></a>线性谐振子</h2><ul><li><p>了解求解一维线性谐振子的方法（势能表达式）</p></li><li><p>掌握一维线性谐振子的能级表达式</p></li><li><p>系统的能量是量子化的，即所构成的能谱是离散的，且能级分布不均匀</p></li><li><p>粒子存在最低能级且不为0（基态n&#x3D;0），这是微观粒子波动性的表现</p></li></ul><h1 id="第三章——量子力学中的力学量"><a href="#第三章——量子力学中的力学量" class="headerlink" title="第三章——量子力学中的力学量"></a>第三章——量子力学中的力学量</h1><ul><li>掌握表示力学量的算符（动量算符和角动量算符）</li><li>掌握厄米算符本征函数的正交性与完备性</li><li>掌握算符与力学量的关系</li><li>掌握算符的对易关系，不确定关系</li></ul><h2 id="表示力学量的算符"><a href="#表示力学量的算符" class="headerlink" title="表示力学量的算符"></a>表示力学量的算符</h2><ul><li>算符的基本性质</li></ul><ol><li>算符相等</li><li>单位算符</li><li>算符之和</li><li>算符乘积</li><li>逆算符</li><li>函数内积</li><li>算符的复共轭</li><li>算符的转置算符：积分定义</li><li>算符的厄米共轭算符：积分定义</li><li>线性算符</li><li>算符的本征值和本征函数</li></ol><ul><li>量子力学的基本假设：如果算符F-表示力学量F，那么当体系处于算符F-的本征态φ时，力学量F有确定值，这个值就是在态φ中的本征值</li><li>量子力学中表示力学量的算符都是厄米算符，厄米算符的本征值都是实数</li></ul><h2 id="动量算符和角动量算符"><a href="#动量算符和角动量算符" class="headerlink" title="动量算符和角动量算符"></a>动量算符和角动量算符</h2><ul><li>动量算符</li></ul><ol><li>掌握求解动量本征函数的过程（注意归一化）</li><li>知道动量本征波函数的表达式</li></ol><ul><li>周期性边界条件（箱归一化）</li></ul><ol><li>目的：把动量连续本征值变为分立值，再把分立值变为连续值</li><li>方法：设想粒子限制在一个正方形的箱子中，取箱子的中点为坐标原点，要求波函数在两个相对的箱壁上对应的点具有相同的值</li><li>考虑周期性边界条件后，动量本征函数可以归一化</li></ol><ul><li>角动量算符</li></ul><ol><li>掌握角动量算符在x，y，z轴的分量</li><li>掌握算符Lz在球坐标下的具体表达式</li><li>掌握算符L^2的本征值方程</li><li>掌握算符Lz的本征值方程</li><li>掌握Lz的本征波函数的具体表达式以及其推导过程</li><li>把对应于一个本征值有一个以上的本征函数的情况称为简并，对应本征函数的数目称为简并度。</li><li>L^2的本征值是（2l+1）度简并的</li></ol><h2 id="电子在库伦场中的运动"><a href="#电子在库伦场中的运动" class="headerlink" title="电子在库伦场中的运动"></a>电子在库伦场中的运动</h2><ul><li>类氢原子电子势能，体系哈密顿算符</li><li>能量的表达式</li><li>库伦场中运动的电子能量小于0的定态波函数表达式（注意n，l，m的取值和表示的意义）</li><li>电子第n个能级是n^2度简并的</li></ul><h2 id="氢原子"><a href="#氢原子" class="headerlink" title="氢原子"></a>氢原子</h2><ul><li>了解一下</li></ul><h2 id="厄米算符本征函数的正交性"><a href="#厄米算符本征函数的正交性" class="headerlink" title="厄米算符本征函数的正交性"></a>厄米算符本征函数的正交性</h2><ul><li>定理：厄米算符的属于不同本征值的两个本征函数相互正交（<strong>该定理需要自己会证明</strong>）</li><li>掌握证明本征函数正交归一的方法</li><li>常见正交归一本征波函数的求解（算符Lz和一维无限深势阱）</li></ul><h2 id="算符与力学量的关系"><a href="#算符与力学量的关系" class="headerlink" title="算符与力学量的关系"></a>算符与力学量的关系</h2><ul><li>本征函数的完备性</li><li>基本假设：量子力学中表示力学量的算符都是厄米算符，它们的本征函数组构成完备系。</li><li>求解力学量均值的方法</li></ul><h2 id="算符的对易关系"><a href="#算符的对易关系" class="headerlink" title="算符的对易关系"></a>算符的对易关系</h2><ul><li>对易的基本操作</li><li>动量分量和其对应坐标不对易；动量分量和其不对应的坐标对易；动量分量对易</li><li><strong>定理：如果两个算符F和G有一组共同的本征函数Φn，而且Φn组成完全系，则算符F和G有对易</strong>（如角动量算符）</li><li>逆定理：如果两个算符对易，则这两个算符有组成完全系的共同本征函数</li><li>不确定关系（表达式）：反映了微观粒子的波粒二象性</li><li>力学量的完全集合：对于N个自由度的体系，需要有N个相互独立，其算符两两对易的力学量来完全确定体系的状态</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MCS-51单片机的硬件结构</title>
      <link href="/2023/11/19/MCS-51%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2023/11/19/MCS-51%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="MCS-51单片机的硬件结构"><a href="#MCS-51单片机的硬件结构" class="headerlink" title="MCS-51单片机的硬件结构"></a>MCS-51单片机的硬件结构</h1><h2 id="MCS-51的组成"><a href="#MCS-51的组成" class="headerlink" title="MCS-51的组成"></a>MCS-51的组成</h2><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119175759007.png" alt="image-20231119175759007"></p><h2 id="MCS-51的引脚"><a href="#MCS-51的引脚" class="headerlink" title="MCS-51的引脚"></a>MCS-51的引脚</h2><p>40只引脚双列直插封装（DIP）</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119175936599.png" alt="image-20231119175936599"></p><p>引脚逻辑图</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119180007389.png" alt="image-20231119180007389"></p><h3 id="电源及时钟引脚"><a href="#电源及时钟引脚" class="headerlink" title="电源及时钟引脚"></a>电源及时钟引脚</h3><ol><li>电源引脚</li></ol><ul><li>Vcc（40脚）：+5V电源</li><li>Vss（20脚）：接地</li></ul><ol start="2"><li>时钟引脚</li></ol><ul><li>XTAL1（19）：采用外部晶振时，此引脚接地</li><li>XTAL2（18）</li></ul><h3 id="控制引脚"><a href="#控制引脚" class="headerlink" title="控制引脚"></a>控制引脚</h3><ol><li><p>RST&#x2F;VPD（9）：复位与备用电源（一定宽度的高电平复位）</p></li><li><p>ALE&#x2F;PROG<em>（30）</em></p><p>第一功能ALE：地址锁存允许（后面介绍）</p><p>第二功能PROG*：编程脉冲输入端</p></li><li><p>PSEN*（29）：读取外部存储器的选通信号</p></li><li><p>EA*&#x2F;VPP（31）</p><p>第一功能：EA*为内外程序存储器选择控制,为低电平时单片机只访问外部程序存储器</p><p>第二功能：用于施加编程电压（不研究）</p></li></ol><h3 id="I-O口引脚"><a href="#I-O口引脚" class="headerlink" title="I&#x2F;O口引脚"></a>I&#x2F;O口引脚</h3><ol><li>P0口：双向8位三态I&#x2F;O口，地址总线（低8位）及数据总线的分时复用口</li><li>P1口：8位准双向I&#x2F;O口，可驱动4个TTL负载</li><li>P2口：8位准双向I&#x2F;O口，与地址总线（高8位）复用</li><li>P3口：8位准双向I&#x2F;O口，双功能复用口</li></ol><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119181609659.png" alt="image-20231119181609659"></p><p>准双向口和双向三态口的区别</p><ul><li>当三个准双向I&#x2F;O口做输入使用时，要向该口写1</li><li>准双向口无高阻的“浮空”状态</li></ul><h2 id="MCS-51的CPU（运算器和控制器）"><a href="#MCS-51的CPU（运算器和控制器）" class="headerlink" title="MCS-51的CPU（运算器和控制器）"></a>MCS-51的CPU（运算器和控制器）</h2><h3 id="运算器（对操作数进行算术、逻辑运算和位操作）"><a href="#运算器（对操作数进行算术、逻辑运算和位操作）" class="headerlink" title="运算器（对操作数进行算术、逻辑运算和位操作）"></a>运算器（对操作数进行算术、逻辑运算和位操作）</h3><ol><li>算术逻辑运算单元ALU</li><li>累加器A（Acc）</li></ol><ul><li>是ALU单元的输入之一，又是运算结果存放单元</li><li>是ALU单元的输入之一，又是运算结果存放单元</li><li>A的进位标志Cy同时又是位处理机的位累加器</li></ul><ol start="3"><li>程序状态字寄存器PSW</li></ol><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119182211785.png" alt="image-20231119182211785"></p><ul><li>Cy（PSW.7）进位标志位 </li><li>Ac   (PSW.6)   辅助进位标志位</li><li>F0（PSW.5）标志位——由用户使用的一个状态标志位</li><li>RS1、RS0（PSW.4、PSW.3）：4组工作寄存器区选择控制位1和位0</li></ul><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119182508472.png" alt="image-20231119182508472"></p><p>多组工作寄存器区可以保证数据的实时性，例如：当引入中断时，可以将RS0置1，改变中断程序使用的寄存器区，从而起到现场保护的作用。</p><ul><li>OV（PSW.2）溢出标志位：指示运算是否产生溢出（第三章详细介绍）</li><li>PSW.1位：保留位，未用</li><li>P(PSW.0)奇偶标志位：P&#x3D;1，A中“1”的个数为奇数；P&#x3D;0，A中“1”的个数为偶数</li></ul><p>奇偶标志位的应用：在串行通信中使用，提高串行通信的可靠性</p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><h4 id="程序计数器PC（Program-Counter）"><a href="#程序计数器PC（Program-Counter）" class="headerlink" title="程序计数器PC（Program Counter）"></a>程序计数器PC（Program Counter）</h4><p>作用：存放下一条要执行的指令在程序存储器中的地址</p><p>基本工作方式</p><ol><li><p>程序计数器自动加1</p></li><li><p>执行有条件或无条件转移指令时，程序计数器将被置入新的数值——&gt;程序流向发生变化</p></li><li><p>执行子程序调用或中断调用时完成下列操作</p></li></ol><ul><li>PC的当前值保护</li><li>将子程序入口地址或中断向量的地址送入PC</li></ul><h4 id="指令寄存器IR、指令译码器及控制逻辑电路"><a href="#指令寄存器IR、指令译码器及控制逻辑电路" class="headerlink" title="指令寄存器IR、指令译码器及控制逻辑电路"></a>指令寄存器IR、指令译码器及控制逻辑电路</h4><h2 id="MCS-51存储器结构"><a href="#MCS-51存储器结构" class="headerlink" title="MCS-51存储器结构"></a>MCS-51存储器结构</h2><p>哈佛（Har-vard）结构：程序存储器和外部数据存储器统一编址（冯诺依曼结构不是这样子的）</p><p>存储空间划分五类：程序存储器空间，内部数据存储器空间，外部数据存储器空间，SFR，位地址空间</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119183726572.png"></p><p>注意：图中特殊功能寄存器SFR在内部数据存储器空间是离散分布的</p><h3 id="程序存储器"><a href="#程序存储器" class="headerlink" title="程序存储器"></a>程序存储器</h3><p>作用：存放应用程序和表格之类的固定常数</p><p>组成：分为片内和片外两部分，由EA<em>引脚上所接电平确定，该引脚为低电平时接入外部程序存储器。*<em>程序存储器中的0000H地址是系统程序的启动地址</em></em></p><p>5个特殊单元：用作五种中断源的中断入口地址，即中断向量</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119184718530.png" alt="image-20231119184718530"></p><h3 id="内部数据存储器（128字节）"><a href="#内部数据存储器（128字节）" class="headerlink" title="内部数据存储器（128字节）"></a>内部数据存储器（128字节）</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119184957720.png" alt="image-20231119184957720"></p><h3 id="特殊功能寄存器SFR（21个）"><a href="#特殊功能寄存器SFR（21个）" class="headerlink" title="特殊功能寄存器SFR（21个）"></a>特殊功能寄存器SFR（21个）</h3><p>作用：51单片机通过写SFR来控制相应功能部件（定时器、串口、中断等）的工作方式，同时SFR也综合的、实际的反映了整个单片机系统内部的工作状态。例如：PSW</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119185229054.png" alt="image-20231119185229054"></p><p><strong>注意：有的SFR可进行位寻址，其字节地址的末位是0H或8H</strong></p><p>下面是SFR中某些寄存器的简介：</p><ol><li><p>堆栈指针SP</p><p>指示出堆栈顶部在内部RAM块中的位置</p><p>堆栈向上生长，出栈后入先出</p><p>上电复位后SP内容默认为07H，作用是保护断点（PC）和现场保护（对Rn压栈）</p><p>由于07H与工作寄存器区重叠，因此使用前先赋值，一般用60H</p></li><li><p>数据指针DPTR</p><p>16位特殊功能寄存器，高位字节寄存器用DPH表示，低位字节寄存器用DPL表示</p></li><li><p>I&#x2F;O端口P0～P3</p><p>P0～P3分别为I&#x2F;O端口P0～P3的锁存器</p></li><li><p>寄存器B</p><p>为执行乘法和除法操作设置的</p><p>在不执行乘、除的情况下，可当作一个普通寄存器来使用</p></li><li><p>串行数据缓冲器SBUF</p><p>存放欲发送或已接收的数据，一个字节地址，物理上是由两个独立的寄存器组成，一个是发送缓冲器，另一个是接收缓冲器</p></li><li><p>定时器&#x2F;计数器</p><p>两个16位定时器&#x2F;计数器T1和T0，各由两个独立的8位寄存器组成： TH1、TL1、TH0、TL0，只能字<br>节寻址，但不能把T1或T0当作一个16位寄存器来寻址访问</p></li></ol><h3 id="位地址空间"><a href="#位地址空间" class="headerlink" title="位地址空间"></a>位地址空间</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119190252438.png" alt="image-20231119190252438"></p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119190303846.png" alt="image-20231119190303846"></p><ul><li>内部RAM的可寻址位128个(字节地址20H～2FH)，特殊功能寄存器SFR为83个可寻址位，共211个</li><li>SFR中字节地址为X0H或X8H的单元可以位寻址</li></ul><h3 id="外部数据存储器"><a href="#外部数据存储器" class="headerlink" title="外部数据存储器"></a>外部数据存储器</h3><ol><li><p>地址的重叠性</p><p><strong>程序存储器与数据存储器全部64K字节地址空间重叠</strong>。程序存储器与数据存储器在使用上是严格区分的：有不同的物理接线（PSEN*），不同的指令控制（MOVC和MOVX）</p></li><li><p><strong>片外数据存储区中，RAM与I&#x2F;O端口统一编址</strong>。所有外围I&#x2F;O端口的地址均占用RAM地址单元，使用与访问<br>外部数据存储器相同的传送指令</p></li></ol><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119191044634.png" alt="image-20231119191044634"></p><p>上图是52系列单片机，不同点在于多了一个128字节的片内数据存储单元，它与SFR采用的寻址方式不同</p><p>SFR用直接寻址，片内RAM用简间接寻址</p><h2 id="并行I-O端口"><a href="#并行I-O端口" class="headerlink" title="并行I&#x2F;O端口"></a>并行I&#x2F;O端口</h2><p><strong>共有4个8位双向I&#x2F;O口，共32口线。每位均有自己的锁存器(SFR)，输出驱动器和输入缓冲器</strong></p><h3 id="P0口内部结构"><a href="#P0口内部结构" class="headerlink" title="P0口内部结构"></a>P0口内部结构</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119195411346.png" alt="image-20231119195411346"></p><ol><li>控制信号为0时，P0做双向I&#x2F;O口，为漏极开路</li><li>控制信号为1时，P0为地址&#x2F;数据复用总线</li><li>POW为端口输出写信号，用于锁存输出状态</li><li>POR1为读锁存器信号，执行“ANL P0，#0FH”时该信号有效</li><li>POR2为读引脚信号，执行“MOV A，P0”时该信号有效</li></ol><h3 id="P1口内部结构"><a href="#P1口内部结构" class="headerlink" title="P1口内部结构"></a>P1口内部结构</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119195925828.png" alt="image-20231119195925828"></p><p>特点：输出部分有内部上拉电阻R*约为20k</p><p>注意：读引脚时先写入1，其它部分与P0端口使用相类似</p><p>读锁存器</p><ul><li><p>读锁存器指令是从锁存器中读取数据，进行处理，并把处理后的数据重新写入锁存器中，这类指令称为读、<br>修改、写指令。</p></li><li><p>在ANL、ORL、XRL； JBC； CPL；INC、DEC； DJNZ； MOV、 CLR、 SETB等指令中，当目的操作数为某一I／O口或I／O口的某一位时，这些指令均为读、修改、写指令。</p></li></ul><p>读端口</p><ul><li>读端口指令一般都是以I&#x2F;O端口为源操作数的指令，执行读引脚指令时，打开三态门，输入口状态。例如，读P1口的输入状态时，读引脚指令为：MOV  A，P1。</li></ul><p>区分读端口和读锁存器</p><ul><li>当给口锁存器写入某一状态后，相应的口引脚是否呈现锁存器的状态，是与外电路的连接有关。如三极管，写1后，外部三极管导通，这样基级电平为0，读锁存器和读引脚就不一致了。</li></ul><h3 id="P2口内部结构"><a href="#P2口内部结构" class="headerlink" title="P2口内部结构"></a>P2口内部结构</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119200958405.png" alt="image-20231119200958405"></p><ol><li>P2可以作为通用的I&#x2F;O，也可做为高八位地址输出（一般用作地址输出）</li><li>当控制信号为1时，P2口输出地址信息</li><li>当P2作为普通I&#x2F;O口使用时用法和P1口类似</li></ol><h3 id="P3口内部结构"><a href="#P3口内部结构" class="headerlink" title="P3口内部结构"></a>P3口内部结构</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119201500357.png" alt="image-20231119201500357"></p><ol><li><p>做普通端口使用时，第二功能应为“1”</p></li><li><p>使用第二功能时，输出端口锁存器应为“1”</p></li><li><p>变异功能</p></li></ol><table><thead><tr><th>P3.0</th><th>P3.1</th><th>P3.2</th><th>P3.3</th><th>P3.4</th><th>P3.5</th><th>P3.6</th><th>P3.7</th></tr></thead><tbody><tr><td>TXD</td><td>RXD</td><td>INT0</td><td>INT1</td><td>T0</td><td>T1</td><td>WR</td><td>RD</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>P0～P3口都是并行I&#x2F;O口，但P0口和P2口还可用来构建数据总线和地址总线，所以电路中有一个MUX，进行转换（MUX是Multiplexer，即多路复用器）</p></li><li><p>只有P0口是一个真正的双向口，P1～P3口都是准双向口</p><p>原因:P0口作数据总线使用时，为保证数据正确传送，需解决芯片内外的隔离问题，即只有在数据传送时芯片内外才接通；否则应处于隔离状态。为此，P0口的输出缓冲器应为三态门</p></li><li><p>P3口具有第二功能。因此在P3口电路增加了第二功能控制逻辑。这是P3口与其它各口的不同之处</p></li><li><p>设计8051系统时，要对51的I&#x2F;O管脚统一规划使用。一个管脚不能既作为输入，又作为输出。换言之，一个管脚如果第一次用其为输入，一直用其作为输入管脚。</p></li><li><p>通常情况下P0和P2就用作数据&#x2F;地址总线使用，P0低8位，P2高8位。</p></li></ol><h2 id="时钟电路与时序"><a href="#时钟电路与时序" class="headerlink" title="时钟电路与时序"></a>时钟电路与时序</h2><p>时钟电路用于产生单片机工作所必须的时间控制信号</p><h3 id="时钟电路"><a href="#时钟电路" class="headerlink" title="时钟电路"></a>时钟电路</h3><p>时钟频率直接影响单片机的速度，电路的质量直接影响系统的稳定性</p><ol><li>内部时钟方式</li></ol><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119202922754.png" alt="image-20231119202922754"></p><ul><li><p>内部有一个用于构成振荡器的高增益反相放大器，其输入端：XTAL1，输出端：XTAL2</p></li><li><p>C1和C2典型值通常选择为30pF左 右</p></li><li><p>晶体的振荡频率在1.2MHz～12MHz之间，某些高速单片机芯片的时钟频率已达40MHz（这里指51）</p></li></ul><ol start="2"><li>外部时钟方式——常用于多片MCS-51单片机同时工作</li></ol><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119203250877.png" alt="image-20231119203250877"></p><h3 id="机器周期、指令周期与指令时序"><a href="#机器周期、指令周期与指令时序" class="headerlink" title="机器周期、指令周期与指令时序"></a>机器周期、指令周期与指令时序</h3><ol><li>时钟周期——单片机的基本时间单位，时钟周期为晶振频率的倒数</li><li>机器周期——CPU完成一个基本操作所需要的时间，MCS-51单片机每12个时钟周期为一个机器周期</li></ol><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119203850489.png" alt="image-20231119203850489"></p><ol start="3"><li>指令周期——执行一条指令时，可分为取指令阶段和指令执行阶段</li></ol><ul><li><p>取指令阶段，PC中地址送到程序存储器，并从中取出需要执行指令的操作码和操作数</p></li><li><p>指令执行阶段，对指令操作码进行译码，以产生一系列控制信号完成指令的执行</p></li><li><p><strong>ALE信号是为地址锁存而定义的，以时钟脉冲1&#x2F;6的频率出现，在一个机器周期中，ALE信号两次有效</strong>（注意，在执行访问外部数据存储器的指令MOVX时，将会丢失一个ALE脉冲）</p></li></ul><h2 id="复位操作和复位电路"><a href="#复位操作和复位电路" class="headerlink" title="复位操作和复位电路"></a>复位操作和复位电路</h2><ol><li>复位操作</li></ol><ul><li><p>复位操作是单片机的初始化操作，摆脱死锁状态</p></li><li><p>在引脚RST加上大于2个机器周期（即24个时钟振荡周期）的高电平就可使MCS-51复位</p></li><li><p>复位时，PC初始化为0000H，使MCS-51单片机从0000H单元开始执行程序</p></li><li><p>除PC之外，复位操作还对其它一些寄存器有影响（SP&#x3D;07H ，P0-P3的引脚均为高电平）</p></li></ul><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119204627973.png" alt="image-20231119204627973"></p><ul><li>在复位有效期间，ALE脚和PSEN*脚均为高电平，内部RAM的状态不受复位的影响</li></ul><ol start="2"><li>复位电路</li></ol><ul><li>片内复位结构</li></ul><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119204958645.png" alt="image-20231119204958645"></p><ul><li>上电自动复位和按钮复位</li></ul><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119205052481.png" alt="image-20231119205052481"></p><ul><li>按键手动复位（有电平方式和脉冲方式）</li></ul><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119205204546.png" alt="image-20231119205204546"></p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119205326337.png" alt="image-20231119205326337"></p><p>上图（b）中的电路能输出高、低两种电平的复位控制信 号，以适应外围I&#x2F;O接口芯片所要求的不同复位电平信号。74LS122为单稳电路，实验表明，电容C的选择约为0.1μF较好。还可采用专用的复位管理芯片如IMP813L、TL7705等</p>]]></content>
      
      
      <categories>
          
          <category> 单片机原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>定时/计数器</title>
      <link href="/2023/11/19/%E5%AE%9A%E6%97%B6-%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
      <url>/2023/11/19/%E5%AE%9A%E6%97%B6-%E8%AE%A1%E6%95%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-定时计数器"><a href="#第六章-定时计数器" class="headerlink" title="第六章 定时计数器"></a>第六章 定时计数器</h1><h2 id="定时计数器的结构框图"><a href="#定时计数器的结构框图" class="headerlink" title="定时计数器的结构框图"></a>定时计数器的结构框图</h2><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119152943798.png" alt="image-20231119152943798"></p><h2 id="定时器的控制字"><a href="#定时器的控制字" class="headerlink" title="定时器的控制字"></a>定时器的控制字</h2><h3 id="TMOD：工作方式控制寄存器（89H）"><a href="#TMOD：工作方式控制寄存器（89H）" class="headerlink" title="TMOD：工作方式控制寄存器（89H）"></a>TMOD：工作方式控制寄存器（89H）</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119153057581.png" alt="image-20231119153057581"></p><ol><li>GATE：门控位</li></ol><ul><li>GATE&#x3D;1，INT0引脚控制T0运行，INT1引脚控制T1运行，可测量这两引脚出现的正脉冲宽度</li><li>GATE&#x3D;0，定时计数器的运行不受外部引脚INT1或INT0的控制</li></ul><ol start="2"><li>C&#x2F;T：计数器模式和定时器模式的选择位</li></ol><ul><li>C&#x2F;T&#x3D;0时，定时器模式。每个机器周期定时器加一</li><li>C&#x2F;T&#x3D;1时，计数器模式。外部相应输入脚T0（p3.4）或T1（p3.5）产生下降沿时，计数器加一</li></ul><ol start="3"><li>M1、M0：工作方式 选择位</li></ol><table><thead><tr><th>M0</th><th align="left">M1</th><th>工作方式</th></tr></thead><tbody><tr><td>0</td><td align="left">0</td><td>方式0：TLX中低五位与THX中8位组成十三位计数器</td></tr><tr><td>1</td><td align="left">0</td><td>方式1：TLX与THX组成16位计数器</td></tr><tr><td>0</td><td align="left">1</td><td>方式2：常数自动重装载的8位计数器，相当于TLX溢出时，将THX中的内容赋给了TLX</td></tr><tr><td>1</td><td align="left">1</td><td>方式3：仅适用于T0，分成两个8位计数器，T1停止计数</td></tr></tbody></table><ol start="4"><li>注意：TMOD不能位寻址</li></ol><h3 id="TCON：控制寄存器（88H）"><a href="#TCON：控制寄存器（88H）" class="headerlink" title="TCON：控制寄存器（88H）"></a>TCON：控制寄存器（88H）</h3><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119154859192.png" alt="image-20231119154859192"></p><ul><li><p>TF1：T1计数溢出标志位。由硬件控制，计数溢出时，由硬件置1。<strong>进入中断服务程序后被硬件自动清零</strong>。</p></li><li><p>TR1：T1计数运行控制位。由软件控制。</p><pre><code>当GATE位（TMOD.7）＝0时，若TR1=1，允许T1计数当GATE位=1时，TR1＝1且INT1=1时，允许T1计数</code></pre></li><li><p>TF0：T0计数溢出标志位，功能同TF1。</p></li><li><p>TR0：T0计数运行控制位，由软件置1或清0。</p><pre><code>当GATE位（TMOD.3）＝0时，若TR0=1，允许T0计数当GATE位=1时，TR0＝1且INT0=1时，允许T0计数。</code></pre></li></ul><h2 id="定时-计数器的四种工作方式"><a href="#定时-计数器的四种工作方式" class="headerlink" title="定时&#x2F;计数器的四种工作方式"></a>定时&#x2F;计数器的四种工作方式</h2><ol><li><p>T1工作在方式0的等效框图</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119160056978.png" alt="image-20231119160056978"></p></li></ol><ul><li>GATE&#x3D;0时，A点始终为1，B点的控制始终由TR1决定</li><li>GATE&#x3D;1时，A点由INT1引脚控制，因此B点由TR1和INT1共同决定</li><li>C&#x2F;T低电平接内部时钟，高电平接外部引脚</li><li>方式1和方式0控制方式完全相同，只是一个是16位计数器，一个是13位计数器</li></ul><ol start="2"><li><p>T1工作在方式2等效框图</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119160704137.png" alt="image-20231119160704137"></p></li></ol><ul><li>相当于自动赋初值，初值为TH1</li><li>该方式可以简化定时常数的计算方法（确定计数初值），可相当精确的确定定时时间，例：波特率发生器</li></ul><ol start="3"><li><p>工作于方式3的T0</p><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119161137288.png" alt="image-20231119161137288"></p></li></ol><ul><li>TL0使用T0的状态控制位C&#x2F;T, GATE,TR0, INT0，而TH0被固定为一个8位定时器（不能作外部计数方式），并<strong>使用定时器T1的状态控制位TR1和TF1，同时占用定时器T1的中断源</strong>。</li><li>此时T1可以工作在方式0~2，但最好工作在方式2，经常做为串行口波特率发生器</li></ul><p><img src="/images/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86/image-20231119161848107.png" alt="image-20231119161848107"></p><h2 id="定时-计数器的输入信号"><a href="#定时-计数器的输入信号" class="headerlink" title="定时&#x2F;计数器的输入信号"></a>定时&#x2F;计数器的输入信号</h2><h3 id="工作于定时器方式"><a href="#工作于定时器方式" class="headerlink" title="工作于定时器方式"></a>工作于定时器方式</h3><p>对内部时钟信号计数，内部时钟信号的频率为时钟振荡频率的1&#x2F;12，即每个机器周期计数值加1</p><h3 id="工作于计数器方式"><a href="#工作于计数器方式" class="headerlink" title="工作于计数器方式"></a>工作于计数器方式</h3><p>计数脉冲来自外部输入引脚T0或T1。当输入信号产生由1至0的跳变（即下跳变）时，计数器的值增1</p>]]></content>
      
      
      <categories>
          
          <category> 单片机原理 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
